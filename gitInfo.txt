1. What is the difference between git and GitHub?

git is an open source distributed version control system. git allows you to set up working directories and track changes
in the files in the directory. This allows you to develop locally, create banches, log and revert project changes. 
GitHub is an online hosting service for git repos. This allows you to build an collaborate on projects together. This makes it easy for
companys, and open source groups to fork repos, create local copies of the application, and submit pull requests to the master copy.

2. How do you write a commit message?

You can write a simple commit message by writting the following line:

$ git commit -a

The a flag tells the command to automatically stage files that have been modified and deleted, but new files you have not
told Git about are not affected. This command by default opens a vim editior allowing you to write a message decribing the changes in the commit.
It is important that this message highlights the file changes incase you need to trace when errors or issues arise in the application.

3. What is a bare repository?

A bare repo just contains version control information and no working files. You would use this when you would like to set up a remote repo
allowing other users to fork the bare repo and submit pull requests to it. To initilize a bare repo simply run: 

$ git init --bare

4. What language is used in git? 

git is built on C. This allows it to be faster than other high level languages.

5. In Git how do you revert a commit that has already been pushed and made public?

There are two ways to do this. 
    1. Identify when the issue occured, resolve the issue, and push a new commit to resolve issues in the prior commit.
    2. Run the following command:
        $ git revert <commit name>
    Reverting should be used when you want to apply the inverse of a commit from your project history. 
    This can be useful, for example, if you’re tracking down a bug and find that it was introduced by a single commit. 
    Instead of manually going in, fixing it, and committing a new snapshot, 
    you can use git revert to automatically do all of this for you.

6. What is cherry picking? 
Cherry picking can cause duplicate commits and many scenarios where cherry picking would work, traditional merges are preferred instead. 
The frontend developer could use git cherry-pick to pick the commit in which this hypothetical data structure was created. 
This pick would enable the frontend developer to continue progress on their side of the project.

7. What is the difference between git pull and git fetch

Git pull command pulls new changes or commits from a particular branch from your central repository and updates your target 
branch in your local repository.

Git fetch is also used for the same purpose but it works in a slightly different way. When you perform a git fetch, it pulls
 all new commits from the desired branch and stores it in a new branch in your local repository. If you want to reflect these 
 changes in your target branch, git fetch must be followed with a git merge. Your target branch will only be updated after merging
 the target branch and fetched branch. Just to make it easy for you, remember the equation below:

Because git fetch is just download the data and not applying it, it will not cause merge conflicts as this does not merge code into the current
project.

Git pull = git fetch + git merge

8. What is the staging area in git?
The staging area is where files from the working directories are added to once you run the git add command. To view changes once they are
added you can run the git status command to view staged files. 

9. How do you unstage a file you have added? 
To unstage a file you run the following command: 

$ git reset HEAD <file>

10. Say you accidently made changes on master branch but it is out now out of sync with the remote master,
    how can you pull from a remote git server to update your local repo?

    To address this issue you can begin by doing the following:
    // Save changes you have worked on
    $ git stash save "Helpful message of changes that were made"

    // Pull changes from remote repo to sync up local repo.
    $ git pull <remote> <branch>
    
    // create a new branch
    $ git branch <branch_name>
    
    // switch to new branch
    $ git checkout <branch_name>

    //Apply changes you previously made
    $ git stash pop

    // Resolve any merge conflicts that have occureds


11. How do you submit a pull request? 
When creating a pull request, it is ideal that you do this on a branch other than your master branch. 
The workflow when creating a pull request is as follows. 

    - Create a directory.
    - Initilize the directory as a git directory.
    - Add a remote git repo
    - Pull from the master branch of the remote
    - Create a new branch.
    - Switch to the new branch.
    - Make changes to the working directory.
    - Add files, and push the new branch to the remote. 


12. What is a git merge? 
Merging combines your local changes with changes made by others. To merge simply run the following: 
$ git merge remote/branch

13. What is a rebase and how do you do it? 

Rebasing allows you to feth changes from a remote and merge them into your local project. To do this:

- Add the remote origin
- Fetch the remote origin
- run $ git rebase upstream/master
- This will essentially play the changes from the upstream on your head 

Typically, you would use git rebase to:
    Edit previous commit messages
    Combine multiple commits into one
    Delete or revert commits that are no longer necessary

13. How will you know in Git if a branch has already been merged into master?
    To know if a branch has been merged into master or not you can use the below commands:
    git branch –-merged It lists the branches that have been merged into the current branch.
    git branch –-no-merged It lists the branches that have not been merged.

14.  What is Git fork? What is difference between fork, branch and clone?
        - A fork is a remote, server-side copy of a repository, distinct from the original.
        - A clone is not a fork; a clone is a local copy of some remote repository. 
          When you clone, you are actually copying the entire source repository, including all the history and branches.
        -A branch is a mechanism to handle the changes within a single repository in order to eventually merge them with
         the rest of code
15. What's the difference between a "pull request" and a "branch"?
    - A branch is a development thread where you can work locally to make changes before submiting them to the upstream.
    - A pull request is when you fork a repo, work on it locally, make some changes, and submit the changes to the upstream. essentially
    putting your code in someone elses codebase .

16. Tell me the difference between HEAD, working tree and index, in Git?
    - The working tree/working directory/workspace is the directory tree of (source) files that you see and edit.
    - The index/staging area is a single, large, binary file in <baseOfRepo>/.git/index, which lists all files in the current branch, 
     their sha1 checksums, time stamps and the file name - it is not another directory with a copy of files in it.
    - HEAD is the last commit on the currently checked out branch.

17. What are the advantages of using GIT?
